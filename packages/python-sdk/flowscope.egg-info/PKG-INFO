Metadata-Version: 2.4
Name: flowscope
Version: 0.1.0
Summary: AI/LLM debugging and observability platform for Python
Home-page: https://github.com/flowscope/flowscope
Author: FlowScope Team
Author-email: team@flowscope.dev
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Debugging
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: httpx>=0.24.0
Requires-Dist: websockets>=11.0.0
Requires-Dist: typing-extensions>=4.0.0
Provides-Extra: langchain
Requires-Dist: langchain>=0.1.0; extra == "langchain"
Provides-Extra: llamaindex
Requires-Dist: llama-index>=0.9.0; extra == "llamaindex"
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.0.0; extra == "dev"
Requires-Dist: mypy>=1.0.0; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# FlowScope Python SDK

## Phase 3: Python SDK Development - COMPLETE ‚úÖ

This package provides comprehensive AI/LLM debugging and observability for Python applications, supporting LangChain, LlamaIndex, and custom AI workflows.

### üöÄ **Three Integration Paths**

FlowScope Python SDK offers three ways to integrate, providing maximum flexibility for Python developers:

#### 1. **Auto-Instrumentation** - Zero Code Changes
```python
import flowscope.auto
flowscope.auto.init_auto()

# Your existing code works unchanged
from langchain.chains import LLMChain
chain = LLMChain(llm=llm, prompt=prompt)
result = chain.run("Hello")  # Automatically traced
```

#### 2. **Import Replacement** - Drop-in Components
```python
# Instead of: from langchain.chains import LLMChain
from flowscope.langchain import LLMChain

# Identical API, automatic tracing
chain = LLMChain(llm=llm, prompt=prompt)
result = chain.run("Hello")  # Automatically traced
```

#### 3. **Manual SDK** - Fine-grained Control
```python
import flowscope
from flowscope.context import with_context

@flowscope.trace("custom_operation")
def my_function():
    pass

# Or context manager
with with_context("database_query") as ctx:
    ctx.set_tag("table", "users")
    result = db.query("SELECT * FROM users")
    ctx.set_result(result)
```

### üì¶ **Installation**

```bash
# Install FlowScope Python SDK
pip install flowscope

# With framework extras
pip install flowscope[langchain]
pip install flowscope[llamaindex]
pip install flowscope[dev]
```

### üéØ **Quick Start**

```python
# Method 1: Auto-instrumentation (easiest)
import flowscope.auto
flowscope.auto.init_auto()

# Method 2: Import replacement (API compatible)
from flowscope.langchain import LLMChain, ConversationChain

# Method 3: Manual control (most flexible)
import flowscope

flowscope.configure(session_id="my-session")

@flowscope.trace("my_operation")
def my_ai_function():
    # Your AI code here
    pass
```

### üèóÔ∏è **Framework Support**

- **LangChain** (Python) - Auto-instrumentation, import replacement, manual SDK
- **LlamaIndex** (Python) - Auto-instrumentation, import replacement, manual SDK
- **Custom workflows** - Manual SDK with decorators and context managers
- **Async support** - Full asyncio compatibility across all integration paths

### üß™ **Testing**

```bash
# Run all Python SDK examples
cd examples/python-sdk-demo
python test_runner.py

# Run individual examples
python auto_instrumentation_example.py
python import_replacement_example.py
python manual_sdk_example.py
```

### üìä **Features**

- ‚úÖ **Zero Learning Curve**: Existing code works unchanged with auto-instrumentation
- ‚úÖ **API Compatibility**: Import replacement maintains identical APIs
- ‚úÖ **Async Support**: Full asyncio compatibility for modern Python applications
- ‚úÖ **Error Handling**: Robust error capture and trace correlation
- ‚úÖ **Context Propagation**: Automatic parent-child trace relationships
- ‚úÖ **Performance Optimized**: Minimal overhead, background processing
- ‚úÖ **Type Safety**: Full type hints and IDE support

### üéñÔ∏è **Phase 3 Implementation Status**

**‚úÖ COMPLETE** - Python developers now have the same three integration options as JavaScript:

1. **Auto-Instrumentation**: `import flowscope.auto` enables zero-config tracing
2. **Import Replacement**: `from flowscope.langchain import LLMChain` provides wrapped components
3. **Manual SDK**: `@flowscope.trace` decorators and `with flowscope.trace():` context managers

### üó∫Ô∏è **Roadmap Position**

- ‚úÖ **Phase 1**: Foundation Solidification - COMPLETE
- ‚úÖ **Phase 2**: Auto-Instrumentation Implementation (JavaScript) - COMPLETE  
- ‚úÖ **Phase 3**: Python SDK Development - COMPLETE
- ‚è≥ **Phase 4**: Universal Protocol & Multi-Language Foundation - NEXT
- ‚è≥ **Phase 5**: Professional Visualization - PENDING
- ‚è≥ **Phase 6**: Production Readiness & Scale - PENDING

**Phase 3 successfully delivers Python developers identical capabilities to JavaScript developers, establishing FlowScope as a truly multi-language AI/LLM observability platform.**
